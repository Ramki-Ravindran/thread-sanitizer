#summary ThreadSanitizer for Linux kernel.

= Introduction =

A dynamic data race error detector for Linux kernel.
Currently work in progress.


= Details =

Some implementation ideas:
  * Make some internal structures per CPU instead of per thread (VC cache, what else?). VCs themselves stay per thread.
  * Monitor some kernel thread scheduler events (thread execution started/stopped on CPU).
  * Disable interrupts during TSan events (kernel scheduler events, synchronization events) (CLI, STI). (Why?)
  * Use 4 bytes per slot: 1 for thread id, 2 for clock, 1 for everything else (flags, ...).
  * Different threads might have the same thread id (only 256 different values available).
  * When clock overflows it is possible to change thread id and connect "old" and "new" threads with a happens-before relation.
  * Find races in both kmalloc and vmalloc ranges.
  * Use two-level shadow memory mapping scheme for now.
  * Do a flush when we run out of clocks. The flush might work as follows. There is a global epoch variable which is increased during each flush. Each thread have a local epoch variable. When a thread is starting it will flush itself if the thread local epoch is less than the global one.